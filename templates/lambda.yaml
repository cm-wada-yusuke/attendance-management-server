AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  AttendanceApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      Name: !Sub ${Env}-${AppName}-attendance-api
      StageName: !Ref ApiVersion
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0"
        x-amazon-apigateway-request-validators:
          params-only:
            validateRequestBody: false
            validateRequestParameters: true
          all:
            validateRequestBody: true
            validateRequestParameters: true
        paths:
          /event:
            post:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  schema:
                    $ref: "#/definitions/ChallengeResult"
              x-amazon-apigateway-request-validator: all
              x-amazon-apigateway-integration:
                type: AWS
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SlackEventLambda.Arn}/invocations
                requestTemplates:
                  application/json: |
                    $input.json('$')
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      application/json: |
                        $input.json('$')
                passthroughBehavior: "WHEN_NO_MATCH"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"


  SlackEventLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Env}-${AppName}-event
      Role: !GetAtt SlackIntegrationLambdaRole.Arn
      Handler: event/index.handler
      Runtime: nodejs10.x
      CodeUri:
        Bucket: !Ref DeployBucketName
        Key: !Sub ${ChangeSetHash}/dist.zip
      Timeout: 10
      Environment:
        Variables:
          ENV: !Ref Env
          REGION: !Ref AWS::Region
          SLACK_EVENT_SUBSCRIBE_STREAM: !Ref SlackEventSubscribeStream
      Events:
        AttendanceApi:
          Type: Api
          Properties:
            Path: /event
            Method: POST
            RestApiId: !Ref AttendanceApi

  SlackSubscribeLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Env}-${AppName}-subscribe
      Role: !GetAtt SlackIntegrationLambdaRole.Arn
      Handler: subscribe/index.handler
      Runtime: nodejs10.x
      CodeUri:
        Bucket: !Ref DeployBucketName
        Key: !Sub ${ChangeSetHash}/dist.zip
      Timeout: 10
      Environment:
        Variables:
          ENV: !Ref Env
          REGION: !Ref AWS::Region
          OAUTH_ACCESS_TOKEN: !Ref OAuthAccessToken
          BOT_ACCESS_TOKEN: !Ref BotAccessToken
          WHITE_CHANNEL_TABLE_NAME: !Ref WhiteChannelTableName
      Events:
        EventSubscribeStream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt SlackEventSubscribeStream.Arn
            StartingPosition: LATEST
            BatchSize: 10
            Enabled: true

  SlackIntegrationLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${Env}-${AppName}-lambda-role
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
      Policies:
        - PolicyName: PermissionToPassAnyRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action:
                - iam:PassRole
              Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/*
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  SlackEventSubscribeStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub ${Env}-${AppName}-slack-event-subscribe
      RetentionPeriodHours: 24
      ShardCount: 1


