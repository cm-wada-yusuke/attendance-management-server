AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  AttendanceApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      Name: !Sub ${Env}-${AppName}-attendance-api
      StageName: !Ref ApiVersion
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0"
        x-amazon-apigateway-request-validators:
          params-only:
            validateRequestBody: false
            validateRequestParameters: true
          all:
            validateRequestBody: true
            validateRequestParameters: true
        paths:
          /event:
            post:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200": {}
              x-amazon-apigateway-request-validator: all
              requestParameters:
                integration.request.header.Content-Type: "'application/x-amz-json-1'"
              x-amazon-apigateway-integration:
                type: AWS
                credentials: !GetAtt SlackIntegrationApiRole.Arn
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:kinesis:action/PutRecord
                requestTemplates:
                  application/json: !Sub
                    - |
                      {
                          "StreamName": "${EventStream}",
                          "Data": "$util.base64Encode($input.body)",
                          "PartitionKey": "$context.requestId"
                      }
                    - { EventStream: !Ref SlackEventSubscribeStream }
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      application/json: |
                        $input.json('$')
                passthroughBehavior: "WHEN_NO_TEMPLATES"

  SlackSubscribeLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Env}-${AppName}-subscribe
      Role: !GetAtt SlackIntegrationLambdaRole.Arn
      Handler: subscribe/index.handler
      Runtime: nodejs10.x
      CodeUri:
        Bucket: !Ref DeployBucketName
        Key: !Sub ${ChangeSetHash}/dist.zip
      Timeout: 10
      Environment:
        Variables:
          ENV: !Ref Env
          REGION: !Ref AWS::Region
          OAUTH_ACCESS_TOKEN: !Ref OAuthAccessToken
          BOT_ACCESS_TOKEN: !Ref BotAccessToken
          WHITE_CHANNEL_TABLE_NAME: !Ref AttendanceWhiteChannelTable
          ATTENDANCE_MANAGEMENT_TABLE_NAME: !Ref AttendanceManagementTable
      Events:
        EventSubscribeStream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt SlackEventSubscribeStream.Arn
            StartingPosition: LATEST
            BatchSize: 100
            Enabled: true

  SlackIntegrationLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${Env}-${AppName}-lambda-role
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
      Policies:
        - PolicyName: PermissionToPassAnyRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action:
                - iam:PassRole
              Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/*
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
  SlackIntegrationApiRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${Env}-${AppName}-api-role
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  SlackEventSubscribeStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub ${Env}-${AppName}-slack-event-subscribe
      RetentionPeriodHours: 24
      ShardCount: 1

  AttendanceWhiteChannelTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Env}-${AppName}-white-list
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: channelId
          AttributeType: S
      KeySchema:
        - AttributeName: channelId
          KeyType: HASH

  AttendanceManagementTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Env}-${AppName}-time-management
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: attendanceId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
#        - AttributeName: image48
#          AttributeType: S
        - AttributeName: name
          AttributeType: S
#        - AttributeName: startAt
#          AttributeType: N
#        - AttributeName: endAt
#          AttributeType: N
        - AttributeName: startAtDay
          AttributeType: N
        - AttributeName: startAtMonth
          AttributeType: N
      KeySchema:
        - AttributeName: attendanceId
          KeyType: HASH
#        - AttributeName: name
#          KeyType: HASH
#        - AttributeName: startAtDay
#          KeyType: HASH
#        - AttributeName: startAtMonth
#          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: name-index
          KeySchema:
            - AttributeName: name
              KeyType: HASH
            - AttributeName: startAtMonth
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - startAt
              - endAt
              - startAtDay
        - IndexName: startAtDay-index
          KeySchema:
            - AttributeName: startAtDay
              KeyType: HASH
            - AttributeName: userId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
